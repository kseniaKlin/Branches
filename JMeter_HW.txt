Jmeter_2 HW

1) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Действия:
1) Достать из Respose значение из поля 'qa_salary_after_6_months' и передать в поле salary запроса http://162.55.220.72:5005/new_data
****************************************************************************************************
1.1) На запрос user_info назначить JSON Extractor с параметрами: Names of created variables: salary_6
	JSON Path expression: $.qa_salary_after_6_months
1.2) В папку добавить BeanShell Assertion со скриптом: 
	${__setProperty(qa_salary_after_6_months,${salary_6})};
1.3) В папку добавить BeanShell PreProcessor со скриптом: 
	String salary = props.get("qa_salary_after_6_months");
	vars.put("salary_6", salary);	
1.4) В папку добавить новый http запрос на эндпоинт /new_data, в значение параметра salary записать ${salary_6}													   
*****************************************************************************************************

===================

2) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Действия:
1) Достать из Respose значение из поля 'name' и передать в поле name запроса http://162.55.220.72:5005/new_data

**********************************************************************************************************
2.1) На запрос new_data назначить JSON Exstractor с парметрами: 
	Names of created variables : name
	JSON Path expression: $.name
2.2) В папку добавить BeanShell Assertion со скриптом: 
	${__setProperty(name,${name})};
2.3) В папку добавить BeanShell PreProcessor со скриптом: 
	String name = props.get("name");
2.4) В папку добавить новый http запрос на эндпоинт /test_pet_info, в значение параметра name записать ${name}								vars.put("name", name);					   
*****************************************************************************************************													   												  

===================

3) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Достать из Respose значение из поля age и передать в поле age запроса http://162.55.220.72:5005/get_test_user

***********************************************************************************************************
3.1) На запрос test_pet_info назначить JSON Exstractor с парметрами: 
	Names of created variables : age
	JSON Path expression: $.age
3.2) В папку добавить BeanShell PreProcessor со скриптом: 
	String age = props.get("age");
3.3) В папку добавить новый http запрос на эндпоинт /get_test_user, в значение параметра age записать ${age}													   
*****************************************************************************************************

Задание ***
0) Изучать как работают Response Assertion.
Это правила, которые проверяют пришедший ответ
1) Сделать Assertion на провекрку статус код 200
Запрос -> Add -> Assertion -> Response assertion. Установить радиобатон на Response Code, Pattern to test = 200
2) Сделать Assertion на провекрку 'daily_food':weight * 0.012
	2.1) К запросу добавить BeanShell PostProcessor со скриптом: import org.apache.jmeter.config.Argument;
																import org.apache.jmeter.config.Arguments;

																Arguments argz = ctx.getCurrentSampler().getArguments();
																for (int i = 0; i < argz.getArgumentCount(); i++) {
																	Argument arg = argz.getArgument(i);
																	if (arg.getName().equals("weight")) {
																	vars.put("weight", arg.getValue());
																	break;
																	}
																}
	2.2) К запросу добавить JSON Extractor с параметрами: Assert JSON Peth exsist: .daily_food
														  Expected Value: ${daily_food}
	2.3) К запросу test_pet_info добавить JSON Assertion с параметрами:
																Assert JSON Peth exsist: .daily_food
																Expected Value: ${__jexl3(${weight} * 0.012,${dayli_food})}
																(галочка Additionally assert value)

===================

4) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
Задание ***
0) Изучать как работают Response Assertion.
1) Сделать Assertion на провекрку статус код 200
Запрос -> Add -> Assertion -> Response assertion. Установить радиобатон на Response Code, Pattern to test = 200
2) Сделать Assertion на провекрку 'salary': salary
	2.1) К запросу добавить BeanShell PostProcessor с скриптом: 
		import org.apache.jmeter.config.Argument;
		import org.apache.jmeter.config.Arguments;

		Arguments argz = ctx.getCurrentSampler().getArguments();
		for (int i = 0; i < argz.getArgumentCount(); i++) {
			Argument arg = argz.getArgument(i);
			if (arg.getName().equals("salary")) {
				vars.put("salary", arg.getValue());
				break;
				}
			}
	2.2) К запросу добавить JSON Assertion с параметрами: 
		Assert JSON Peth exsist: .salary
		Expected Value: ${salary}
														  
===================
